using StringCalculator.Test.Utilities;
using System.Threading.Channels;

namespace StringCalculator.Test
{
    public class CalculateurTest
    {
        public static IEnumerable<object[]> CasTestsNNombres 
            => new AdditionTestCaseGenerator(new Random()).Generate();

        [Theory]
        [MemberData(nameof(CasTestsNNombres))]
        public void TestNNombres(params uint[] parameters)
        {
            // ETANT DONNE une cha√Æne "x, y, ..."
            var cha√Æne = string.Join(',', parameters);

            // QUAND on l'envoie √† Add
            var r√©sultat = Calculateur.Add(cha√Æne);

            // ALORS on obtient un entier x+y+...
            Assert.Equal(parameters.Sum(), r√©sultat);
        }

        [Fact]
        public void TestSautsLigne()
        {
            // ETANT DONNE une cha√Æne "x, y" ayant un saut de ligne en cours de nombre
            var cha√Æne = "1,1" + Environment.NewLine + "0";

            // QUAND on l'envoie √† Add
            var r√©sultat = Calculateur.Add(cha√Æne);

            // ALORS on obtient un entier x+y
            Assert.Equal<uint>(11, r√©sultat);
        }
        
        [Fact]
        public void NombresNegatif()
        {
            // ETANT DONNE une cha√Æne "-1, 0"
            const string cha√Æne = $"-1,0";

            // QUAND on l'envoie √† Add
            void Act() => Calculateur.Add(cha√Æne);

            // ALORS une exception est lanc√©e
            var exception = Assert.Throws<NombreNegatifException>(Act);

            // ET elle contient 1 en position
            Assert.Equal(1, exception.Position);

            // ET elle contient -1 comme nombre fautif
            Assert.Equal("-1", exception.NombreFautif);
        }

        [Fact]
        public void DeuxNombresNegatif()
        {
            // ETANT DONNE une cha√Æne "-1, -2"
            const string cha√Æne = $"-1,-2";

            // QUAND on l'envoie √† Add
            void Act() => Calculateur.Add(cha√Æne);

            // ALORS une exception est lanc√©e
            var exceptionM√®re = Assert.Throws<AggregateException>(Act);
            var exceptionsFilles = exceptionM√®re
                .InnerExceptions
                .OfType<NombreNegatifException>()
                .ToArray();

            // ET elle contient deux NombreNegatifException
            Assert.Equal(2, exceptionsFilles.Count());

            // ET chacune contient la position et le nombre fautif
            Assert.Contains(exceptionsFilles, exception => exception.Position == 1 && exception.NombreFautif == "-1");
            Assert.Contains(exceptionsFilles, exception => exception.Position == 2 && exception.NombreFautif == "-2");
        }
        
        [Fact]
        public void IgnorerPlusDe1000()
        {
            // ETANT DONNE une chaine de la forme "x,y,z" o√π un √©l√©ment est sup√©rieur √† 1000
            const string cha√Æne = "1,1001,1000";

            // QUAND on l'envoie √† Add
            var r√©sultat = Calculateur.Add(cha√Æne);

            // ALORS le r√©sultat est le m√™me que le r√©sultat d'une m√™me cha√Æne sans cet √©l√©ment
            var cha√ÆneSansGrandNombre = "1, 1000";
            var r√©sultatSansGrandNombre = Calculateur.Add(cha√ÆneSansGrandNombre);

            Assert.Equal(r√©sultatSansGrandNombre, r√©sultat);
        }

        [Theory]
        [InlineData("üéÑ")]
        [InlineData("ü¶É")]
        [InlineData("/")]
        [InlineData("//")]
        public void ChangementD√©limitateur(string d√©limitateur)
        {
            // ETANT DONNE une ligne //<d√©limitateur> avant tout nombre
            var d√©finitionD√©limitateur = $"//{d√©limitateur}" + Environment.NewLine;
            var cha√Æne = $"1{d√©limitateur}1";

            // QUAND on envoie la ligne pr√©c√©dente puis 1<d√©limitateur>1 √† Add
            var r√©sultat = Calculateur.Add(d√©finitionD√©limitateur + cha√Æne);

            // ALORS on obtient le m√™me r√©sultat que 1,1
            var r√©sultatD√©limitateurVanilla = Calculateur.Add("1,1");

            Assert.Equal(r√©sultatD√©limitateurVanilla, r√©sultat);
        }
    }
}